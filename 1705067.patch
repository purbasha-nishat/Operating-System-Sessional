diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d5f9712
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 09d790c..719a4c8 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testSwap\
+	_testSwap2\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +219,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -253,6 +255,8 @@ EXTRA=\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
+	testSwap.c\
+	testSwap2.c\
 
 dist:
 	rm -rf dist
diff --git a/defs.h b/defs.h
index 82fb982..5222579 100644
--- a/defs.h
+++ b/defs.h
@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+
 
 // ide.c
 void            ideinit(void);
@@ -124,6 +129,11 @@ void            yield(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
@@ -185,6 +195,13 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+int             checkInSwapFile(struct proc *p, uint va);
+void            swapOut(struct proc *p, pde_t *pgdir, uint va, pte_t *pte, uint count);
+void            FIFO(struct proc *p);
+void            AGING(struct proc *p);
+void            swapIn(struct proc *p, uint va);
+void            pageRemove(struct proc *p,uint va, pde_t *pgdir);
+void            counterFixing(struct proc *p);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/exec.c b/exec.c
index b40134f..dc8389c 100644
--- a/exec.c
+++ b/exec.c
@@ -7,6 +7,13 @@
 #include "x86.h"
 #include "elf.h"
 
+void
+execInitializer(struct proc * curproc){
+  curproc->pagePM = 0;
+  curproc->pageSF = 0;
+  curproc->writtenPlaceCount = 0;
+}
+
 int
 exec(char *path, char **argv)
 {
@@ -19,6 +26,11 @@ exec(char *path, char **argv)
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
 
+  cprintf("start In exec----pid:%d, name %s, pgdir: %p\n",curproc->pid, curproc->name, *(curproc->pgdir));
+  
+  curproc->start = 1;
+  //execInitializer(curproc);
+
   begin_op();
 
   if((ip = namei(path)) == 0){
@@ -38,6 +50,7 @@ exec(char *path, char **argv)
   if((pgdir = setupkvm()) == 0)
     goto bad;
 
+  cprintf("pgdir %p\n",*(pgdir));
   // Load program into memory.
   sz = 0;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
@@ -63,6 +76,7 @@ exec(char *path, char **argv)
   // Allocate two pages at the next page boundary.
   // Make the first inaccessible.  Use the second as the user stack.
   sz = PGROUNDUP(sz);
+  cprintf("pgdir %p\n",*(pgdir));
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
     goto bad;
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
@@ -101,6 +115,9 @@ exec(char *path, char **argv)
   curproc->tf->esp = sp;
   switchuvm(curproc);
   freevm(oldpgdir);
+
+  cprintf("end In exec----pid:%d, name %s, pgdir: %p\n",curproc->pid, curproc->name, *(curproc->pgdir));
+
   return 0;
 
  bad:
diff --git a/fs.c b/fs.c
index f77275f..4966e79 100644
--- a/fs.c
+++ b/fs.c
@@ -668,3 +668,144 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+// NEW FOR PAGING
+
+#include "fcntl.h"
+#define DIGITS 14
+
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+
+	ilock(dp);
+
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+
+	end_op();
+
+	return 0;
+
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+
+}
+
+
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+
+    return 0;
+}
+
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return filewrite(p->swapFile, buffer, size);
+
+}
+
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return fileread(p->swapFile, buffer,  size);
+}
+
diff --git a/fs.c.orig b/fs.c.orig
new file mode 100644
index 0000000..f77275f
--- /dev/null
+++ b/fs.c.orig
@@ -0,0 +1,670 @@
+// File system implementation.  Five layers:
+//   + Blocks: allocator for raw disk blocks.
+//   + Log: crash recovery for multi-step updates.
+//   + Files: inode allocator, reading, writing, metadata.
+//   + Directories: inode with special contents (list of other inodes!)
+//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
+//
+// This file contains the low-level file system manipulation
+// routines.  The (higher-level) system call implementations
+// are in sysfile.c.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+#include "file.h"
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+static void itrunc(struct inode*);
+// there should be one superblock per disk device, but we run with
+// only one device
+struct superblock sb; 
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+}
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+
+  bp = bread(dev, bno);
+  memset(bp->data, 0, BSIZE);
+  log_write(bp);
+  brelse(bp);
+}
+
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+        log_write(bp);
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+  log_write(bp);
+  brelse(bp);
+}
+
+// Inodes.
+//
+// An inode describes a single unnamed file.
+// The inode disk structure holds metadata: the file's type,
+// its size, the number of links referring to it, and the
+// list of blocks holding the file's content.
+//
+// The inodes are laid out sequentially on disk at
+// sb.startinode. Each inode has a number, indicating its
+// position on the disk.
+//
+// The kernel keeps a cache of in-use inodes in memory
+// to provide a place for synchronizing access
+// to inodes used by multiple processes. The cached
+// inodes include book-keeping information that is
+// not stored on disk: ip->ref and ip->valid.
+//
+// An inode and its in-memory representation go through a
+// sequence of states before they can be used by the
+// rest of the file system code.
+//
+// * Allocation: an inode is allocated if its type (on disk)
+//   is non-zero. ialloc() allocates, and iput() frees if
+//   the reference and link counts have fallen to zero.
+//
+// * Referencing in cache: an entry in the inode cache
+//   is free if ip->ref is zero. Otherwise ip->ref tracks
+//   the number of in-memory pointers to the entry (open
+//   files and current directories). iget() finds or
+//   creates a cache entry and increments its ref; iput()
+//   decrements ref.
+//
+// * Valid: the information (type, size, &c) in an inode
+//   cache entry is only correct when ip->valid is 1.
+//   ilock() reads the inode from
+//   the disk and sets ip->valid, while iput() clears
+//   ip->valid if ip->ref has fallen to zero.
+//
+// * Locked: file system code may only examine and modify
+//   the information in an inode and its content if it
+//   has first locked the inode.
+//
+// Thus a typical sequence is:
+//   ip = iget(dev, inum)
+//   ilock(ip)
+//   ... examine and modify ip->xxx ...
+//   iunlock(ip)
+//   iput(ip)
+//
+// ilock() is separate from iget() so that system calls can
+// get a long-term reference to an inode (as for an open file)
+// and only lock it for short periods (e.g., in read()).
+// The separation also helps avoid deadlock and races during
+// pathname lookup. iget() increments ip->ref so that the inode
+// stays cached and pointers to it remain valid.
+//
+// Many internal file system functions expect the caller to
+// have locked the inodes involved; this lets callers create
+// multi-step atomic operations.
+//
+// The icache.lock spin-lock protects the allocation of icache
+// entries. Since ip->ref indicates whether an entry is free,
+// and ip->dev and ip->inum indicate which i-node an entry
+// holds, one must hold icache.lock while using any of those fields.
+//
+// An ip->lock sleep-lock protects all ip-> fields other than ref,
+// dev, and inum.  One must hold ip->lock in order to
+// read or write that inode's ip->valid, ip->size, ip->type, &c.
+
+struct {
+  struct spinlock lock;
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(int dev)
+{
+  int i = 0;
+  
+  initlock(&icache.lock, "icache");
+  for(i = 0; i < NINODE; i++) {
+    initsleeplock(&icache.inode[i].lock, "inode");
+  }
+
+  readsb(dev, &sb);
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+ inodestart %d bmap start %d\n", sb.size, sb.nblocks,
+          sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
+          sb.bmapstart);
+}
+
+static struct inode* iget(uint dev, uint inum);
+
+//PAGEBREAK!
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb));
+    dip = (struct dinode*)bp->data + inum%IPB;
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+
+// Copy a modified in-memory inode to disk.
+// Must be called after every change to an ip->xxx field
+// that lives on disk, since i-node cache is write-through.
+// Caller must hold ip->lock.
+void
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+}
+
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+
+  return ip;
+}
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+  ip->ref++;
+  release(&icache.lock);
+  return ip;
+}
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->valid = 1;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+}
+
+// Drop a reference to an in-memory inode.
+// If that was the last reference, the inode cache entry can
+// be recycled.
+// If that was the last reference and the inode has no links
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+  acquiresleep(&ip->lock);
+  if(ip->valid && ip->nlink == 0){
+    acquire(&icache.lock);
+    int r = ip->ref;
+    release(&icache.lock);
+    if(r == 1){
+      // inode has no links and no other references: truncate and free.
+      itrunc(ip);
+      ip->type = 0;
+      iupdate(ip);
+      ip->valid = 0;
+    }
+  }
+  releasesleep(&ip->lock);
+
+  acquire(&icache.lock);
+  ip->ref--;
+  release(&icache.lock);
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+}
+
+//PAGEBREAK!
+// Inode content
+//
+// The content (data) associated with each inode is stored
+// in blocks on the disk. The first NDIRECT block numbers
+// are listed in ip->addrs[].  The next NINDIRECT blocks are
+// listed in block ip->addrs[NDIRECT].
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+
+// Truncate inode (discard contents).
+// Only called when the inode has no links
+// to it (no directory entries referring to it)
+// and has no in-memory reference to it (is
+// not an open file or current directory).
+static void
+itrunc(struct inode *ip)
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    if(ip->addrs[i]){
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+}
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+  st->dev = ip->dev;
+  st->ino = ip->inum;
+  st->type = ip->type;
+  st->nlink = ip->nlink;
+  st->size = ip->size;
+}
+
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+}
+
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+}
+
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+}
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+      // entry matches path element
+      if(poff)
+        *poff = off;
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("dirlink");
+
+  return 0;
+}
+
+//PAGEBREAK!
+// Paths
+
+// Copy the next path element from path into name.
+// Return a pointer to the element following the copied one.
+// The returned path has no leading slashes,
+// so the caller can check *path=='\0' to see if the name is the last one.
+// If no name to remove, return 0.
+//
+// Examples:
+//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
+//   skipelem("///a//bb", name) = "bb", setting name = "a"
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+    path++;
+  return path;
+}
+
+// Look up and return the inode for a path name.
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+}
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/paging.patch b/paging.patch
new file mode 100644
index 0000000..54ef2b9
--- /dev/null
+++ b/paging.patch
@@ -0,0 +1,225 @@
+diff --git a/defs.h b/defs.h
+index 82fb982..f33f2cb 100644
+--- a/defs.h
++++ b/defs.h
+@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
+ int             readi(struct inode*, char*, uint, uint);
+ void            stati(struct inode*, struct stat*);
+ int             writei(struct inode*, char*, uint, uint);
++int             createSwapFile(struct proc* p);
++int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
++int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
++int             removeSwapFile(struct proc* p);
++
+ 
+ // ide.c
+ void            ideinit(void);
+@@ -124,6 +129,11 @@ void            yield(void);
+ // swtch.S
+ void            swtch(struct context**, struct context*);
+ 
++// sysfile
++struct inode*   create(char *path, short type, short major, short minor);
++int             isdirempty(struct inode *dp);
++
++
+ // spinlock.c
+ void            acquire(struct spinlock*);
+ void            getcallerpcs(void*, uint*);
+diff --git a/fs.c b/fs.c
+index feb59fe..f7c92cf 100644
+--- a/fs.c
++++ b/fs.c
+@@ -669,3 +669,144 @@ nameiparent(char *path, char *name)
+ {
+   return namex(path, 1, name);
+ }
++
++// NEW FOR PAGING
++
++#include "fcntl.h"
++#define DIGITS 14
++
++char* itoa(int i, char b[]){
++    char const digit[] = "0123456789";
++    char* p = b;
++    if(i<0){
++        *p++ = '-';
++        i *= -1;
++    }
++    int shifter = i;
++    do{ //Move to where representation ends
++        ++p;
++        shifter = shifter/10;
++    }while(shifter);
++    *p = '\0';
++    do{ //Move back, inserting digits as u go
++        *--p = digit[i%10];
++        i = i/10;
++    }while(i);
++    return b;
++}
++
++//remove swap file of proc p;
++int
++removeSwapFile(struct proc* p)
++{
++	//path of proccess
++	char path[DIGITS];
++	memmove(path,"/.swap", 6);
++	itoa(p->pid, path+ 6);
++
++	struct inode *ip, *dp;
++	struct dirent de;
++	char name[DIRSIZ];
++	uint off;
++
++	if(0 == p->swapFile)
++	{
++		return -1;
++	}
++	fileclose(p->swapFile);
++
++	begin_op();
++	if((dp = nameiparent(path, name)) == 0)
++	{
++		end_op();
++		return -1;
++	}
++
++	ilock(dp);
++
++	  // Cannot unlink "." or "..".
++	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
++	   goto bad;
++
++	if((ip = dirlookup(dp, name, &off)) == 0)
++		goto bad;
++	ilock(ip);
++
++	if(ip->nlink < 1)
++		panic("unlink: nlink < 1");
++	if(ip->type == T_DIR && !isdirempty(ip)){
++		iunlockput(ip);
++		goto bad;
++	}
++
++	memset(&de, 0, sizeof(de));
++	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
++		panic("unlink: writei");
++	if(ip->type == T_DIR){
++		dp->nlink--;
++		iupdate(dp);
++	}
++	iunlockput(dp);
++
++	ip->nlink--;
++	iupdate(ip);
++	iunlockput(ip);
++
++	end_op();
++
++	return 0;
++
++	bad:
++		iunlockput(dp);
++		end_op();
++		return -1;
++
++}
++
++
++//return 0 on success
++int
++createSwapFile(struct proc* p)
++{
++
++	char path[DIGITS];
++	memmove(path,"/.swap", 6);
++	itoa(p->pid, path+ 6);
++
++    begin_op();
++    struct inode * in = create(path, T_FILE, 0, 0);
++	iunlock(in);
++
++	p->swapFile = filealloc();
++	if (p->swapFile == 0)
++		panic("no slot for files on /store");
++
++	p->swapFile->ip = in;
++	p->swapFile->type = FD_INODE;
++	p->swapFile->off = 0;
++	p->swapFile->readable = O_WRONLY;
++	p->swapFile->writable = O_RDWR;
++    end_op();
++
++    return 0;
++}
++
++//return as sys_write (-1 when error)
++int
++writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
++{
++	p->swapFile->off = placeOnFile;
++
++	return filewrite(p->swapFile, buffer, size);
++
++}
++
++//return as sys_read (-1 when error)
++int
++readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
++{
++	p->swapFile->off = placeOnFile;
++
++	return fileread(p->swapFile, buffer,  size);
++}
++
+diff --git a/mmu.h b/mmu.h
+index a82d8e2..aec4420 100644
+--- a/mmu.h
++++ b/mmu.h
+@@ -95,6 +95,8 @@ struct segdesc {
+ #define PTE_W           0x002   // Writeable
+ #define PTE_U           0x004   // User
+ #define PTE_PS          0x080   // Page Size
++#define PTE_A           0x020   // Accessed
++#define PTE_PG          0x200   // Paged out to secondary storage
+ 
+ // Address in page table or page directory entry
+ #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
+diff --git a/proc.h b/proc.h
+index 1647114..9f65fae 100644
+--- a/proc.h
++++ b/proc.h
+@@ -49,6 +49,8 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  //Swap file. must initiate with create swap file
++  struct file *swapFile;			//page file
+ };
+ 
+ // Process memory is laid out contiguously, low addresses first:
+diff --git a/sysfile.c b/sysfile.c
+index 87e508b..22d3588 100644
+--- a/sysfile.c
++++ b/sysfile.c
+@@ -165,7 +165,7 @@ bad:
+ }
+ 
+ // Is the directory dp empty except for "." and ".." ?
+-static int
++int
+ isdirempty(struct inode *dp)
+ {
+   int off;
+@@ -238,7 +238,7 @@ bad:
+   return -1;
+ }
+ 
+-static struct inode*
++struct inode*
+ create(char *path, short type, short major, short minor)
+ {
+   uint off;
diff --git a/proc.c b/proc.c
index 806b1b1..3ed48ac 100644
--- a/proc.c
+++ b/proc.c
@@ -75,6 +75,7 @@ allocproc(void)
 {
   struct proc *p;
   char *sp;
+  int val = -2;
 
   acquire(&ptable.lock);
 
@@ -88,9 +89,21 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->start = 0;
   release(&ptable.lock);
 
+  // Creating swap file
+  
+  if(p->pid > 2)
+    val = createSwapFile(p);
+  if(val == 0)
+    cprintf("file created for pid: %d\n",p->pid);
+  
+  p->pagePM = 0;
+  p->pageSF = 0;
+  p->writtenPlaceCount = 0;
+  // p->start = 1;
+
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
     p->state = UNUSED;
@@ -161,6 +174,8 @@ growproc(int n)
   uint sz;
   struct proc *curproc = myproc();
 
+  // cprintf("In growproc pid: %d, cur->pgdir %p\n", curproc->pid, *(curproc->pgdir));
+
   sz = curproc->sz;
   if(n > 0){
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
@@ -174,6 +189,47 @@ growproc(int n)
   return 0;
 }
 
+void
+forkInitializer(struct proc * curproc, struct proc * np){
+  np->pageSF = curproc->pageSF;
+  np->pagePM = curproc->pagePM;
+  np->writtenPlaceCount = curproc->writtenPlaceCount;
+  np->start = 1;
+
+  for (int i = 0; i < MAX_PSYC_PAGES; i++)
+  {
+    np->pgListRAM[i] = curproc->pgListRAM[i];
+  }
+
+  for (int i=0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++)
+  {
+    np->pgListFile[i] = curproc->pgListFile[i];
+  }
+
+  for (int i=0; i < (curproc->pageSF); i++){
+    char buff[PGSIZE/2];
+    memset(buff,0,PGSIZE/2);
+    int val = readFromSwapFile(curproc,buff,PGSIZE*i,PGSIZE/2);
+    int val2 = writeToSwapFile(np,buff,PGSIZE*i,PGSIZE/2);
+    if(val == -1)
+      panic("Can not read--- in fork\n");
+    if(val2 == -1)
+      panic("Can not write--- in fork\n");
+    // cprintf("Copy from swap file: read: %d, write: %d\n",val,val2);
+
+    //buff[PGSIZE/2];
+    memset(buff,0,PGSIZE/2);
+    val = readFromSwapFile(curproc,buff,(PGSIZE*i) + PGSIZE/2,PGSIZE/2);
+    val2 = writeToSwapFile(np,buff,(PGSIZE*i) + PGSIZE/2,PGSIZE/2);
+    if(val == -1)
+      panic("Can not read--- in fork\n");
+    if(val2 == -1)
+      panic("Can not write--- in fork\n");
+    // cprintf("Copy from swap file: read: %d, write: %d\n",val,val2);
+  }
+
+}
+
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
@@ -188,6 +244,9 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
+  cprintf("--------------------------------------fork--------------------------------------\n");
+
+  // cprintf("id in fork: %d, mom id: %d, ch name: %s\n",np->pid,curproc->pid,np->name);
 
   // Copy process state from proc.
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
@@ -199,6 +258,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  
+  
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -217,6 +278,11 @@ fork(void)
   np->state = RUNNABLE;
 
   release(&ptable.lock);
+  forkInitializer(curproc,np);
+
+  // cprintf("np parent: %s\n", np->parent->name);
+
+  // cprintf("---------------END FORK----------\n");
 
   return pid;
 }
@@ -230,6 +296,7 @@ exit(void)
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
+  int val = -2;
 
   if(curproc == initproc)
     panic("init exiting");
@@ -247,11 +314,22 @@ exit(void)
   end_op();
   curproc->cwd = 0;
 
+  cprintf("ID: %d --Pages accuired in RAM: %d\n",curproc->pid, curproc->pagePM);
+  cprintf("ID: %d --Pages accuired in swap file: %d\n",curproc->pid, curproc->pageSF);
+
+  // Removing swap file
+  val = removeSwapFile(curproc);
+  if(val == 0)
+    cprintf("file removed for pid: %d\n", curproc->pid);
+
+  
+
   acquire(&ptable.lock);
 
   // Parent might be sleeping in wait().
   wakeup1(curproc->parent);
 
+
   // Pass abandoned children to init.
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->parent == curproc){
@@ -261,10 +339,12 @@ exit(void)
     }
   }
 
+
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
+  
   sched();
-  panic("zombie exit");
+
 }
 
 // Wait for a child process to exit and return its pid.
@@ -516,6 +596,8 @@ procdump(void)
   char *state;
   uint pc[10];
 
+  
+
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
@@ -530,5 +612,36 @@ procdump(void)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
+    cprintf("Page Table:\n");
+    cprintf("\tMemory location of page directory = %p\n", *(p->pgdir));
+
+    pde_t *pde;
+    pte_t *level1;
+    pte_t *level2;
+    for(int i = 0; i < 512; i++){
+      pde = &(p->pgdir[i]);
+      if((*pde & PTE_P) && (*pde & PTE_U)){ 
+        cprintf("\tpdir PDE %d, %d:\n",i,PTE_ADDR(*pde) >> 12);
+        cprintf("\t\tMemory location of page table  = %p\n", PTE_ADDR(*pde)); 
+        level1 = (pte_t*)P2V(PTE_ADDR(*pde));
+        for(int j = 0; j < 1024; j++){
+          level2 = &(level1[j]);
+          if((*level2 & PTE_P) && (*level2 & PTE_U)){         
+            cprintf("\t\tptbl PTE %d, %d, %p\n",j,PTE_ADDR(*level2) >> 12, PTE_ADDR(*level2));
+          }
+        }
+
+        cprintf("\tPage Mapping:\n");
+        for(int j = 0; j < 1024; j++){
+          level2 = &(level1[j]);
+          if((*level2 & PTE_P) && (*level2 & PTE_U)){         
+            cprintf("\t%d -------> %d\n",(i*1024+j),PTE_ADDR(*level2) >> 12);
+          }
+        }
+        
+      }
+    }
   }
 }
+
+
diff --git a/proc.h b/proc.h
index 1647114..e3dc473 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,6 @@
+#define MAX_PSYC_PAGES 15
+#define MAX_TOTAL_PAGES 30
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -32,6 +35,16 @@ struct context {
   uint eip;
 };
 
+ 
+
+struct pageList {
+  pde_t* pgdir;
+  uint va;
+  pte_t* pte;
+  uint writtenPlace;
+  uint counter;
+};
+
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
@@ -49,6 +62,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;			//page file
+  int pagePM;                  // Page number in physical memory
+  int pageSF;                  // Page number in swap file
+  struct pageList pgListRAM[MAX_PSYC_PAGES];     // List of pages added in RAM
+  struct pageList pgListFile[MAX_TOTAL_PAGES - MAX_PSYC_PAGES];     // List of pages added in RAM
+  int start;                   // to check truely start
+  int writtenPlaceCount;       // counting place to write
+  
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sh.c b/sh.c
index 054bab9..03eabf8 100644
--- a/sh.c
+++ b/sh.c
@@ -166,7 +166,10 @@ main(void)
     }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
+    // printf(1,"--------------------------------------------------------------------------------------------------wait er age\n");
     wait();
+    // printf(1,"print: %d\n",p);
+    // printf(1,"--------------------------------------------------------------------------------------------------wait er PORE\n");
   }
   exit();
 }
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..bf3848e 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,7 @@ bad:
   return -1;
 }
 
-static struct inode*
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   struct inode *ip, *dp;
diff --git a/sysfile.c.orig b/sysfile.c.orig
new file mode 100644
index 0000000..bfe61b7
--- /dev/null
+++ b/sysfile.c.orig
@@ -0,0 +1,444 @@
+//
+// File-system system calls.
+// Mostly argument checking, since we don't trust
+// user code, and calls into file.c and fs.c.
+//
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+
+int
+sys_read(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+int
+sys_write(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+int
+sys_close(void)
+{
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+sys_fstat(void)
+{
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+    return -1;
+  return filestat(f, st);
+}
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+  iput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+int
+sys_open(void)
+{
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+int
+sys_mkdir(void)
+{
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_mknod(void)
+{
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_chdir(void)
+{
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+  
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = ip;
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+
+int
+sys_pipe(void)
+{
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
diff --git a/sysproc.c b/sysproc.c
index 0686d29..77d79c6 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -47,7 +47,6 @@ sys_sbrk(void)
 {
   int addr;
   int n;
-
   if(argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
diff --git a/testSwap.c b/testSwap.c
new file mode 100644
index 0000000..bff8c87
--- /dev/null
+++ b/testSwap.c
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    printf(1,"Beginning-------\n");
+    sleep(10);
+    for(int i = 0; i < 15; i++){
+        printf(1,"allocating new page with i --------- %d\n",i);
+        sbrk(4096);
+        printf(1,"check page table------\n");
+       // sleep(10);
+    }
+    fork();
+   // printf(1,"fork called-----\n");
+    sleep(2000);
+    exit();
+}
\ No newline at end of file
diff --git a/testSwap2.c b/testSwap2.c
new file mode 100644
index 0000000..742ef22
--- /dev/null
+++ b/testSwap2.c
@@ -0,0 +1,91 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+void try1()
+{
+    int sz = 4096 * 17;
+    char *a = (char *)malloc(sz);
+
+    for (int i = 0; i < sz - 1; i++)
+    {
+        char ch = (i % 26) + 'a';
+        a[i] = ch;
+    }
+    sleep(250);
+    int flag = 1;
+
+    for (int i = 0; i < sz - 1; i++)
+    {
+        if (a[i] - 'a' != (i % 26))
+        {
+            printf(2, "Index i = %d , Failed\n", i);
+            flag = 0;
+            break;
+        }
+    }
+    if (!flag)
+    {
+        printf(2, "Failed!!!\n");
+    }
+    else
+    {
+        printf(2, "Success!!!\n");
+    }
+    free((void *)a);
+}
+
+void try2()
+{
+    int sz = 4096 * 17;
+    int *a = (int *)malloc(sz);
+    int pid = fork();
+    int x;
+    int y;
+    if (pid == 0)
+    {
+        x = 21;
+        y = 30;
+    }
+    else
+    {
+        x = 11;
+        y = 20;
+    }
+
+    for (int i = 0; i < sz / 4; i++)
+    {
+        a[i] = (x ^ i) * y;
+    }
+    sleep(250);
+    int flag = 1;
+    for (int i = 0; i < sz / 4; i++)
+    {
+        if (a[i] != (x ^ i) * y)
+        {
+            printf(2, "%d %d %d\n", i, (x ^ i) * y, a[i]);
+            flag = 0;
+            break;
+        }
+    }
+    // sleep(250);
+    if (!flag)
+    {
+        printf(2, "Failed!!!\n");
+    }
+    else
+    {
+        printf(2, "Success!!!\n");
+    }
+    free((void *)a);
+    if (pid != 0)
+    {
+        wait();
+    }
+}
+int main(int argc, char *argv[])
+{
+    try1();
+    try2();
+    exit();
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..829fcdf 100644
--- a/trap.c
+++ b/trap.c
@@ -53,6 +53,11 @@ trap(struct trapframe *tf)
       ticks++;
       wakeup(&ticks);
       release(&tickslock);
+      if(myproc() != 0){
+        if(myproc()->pid > 2)
+          counterFixing(myproc());
+      }
+      
     }
     lapiceoi();
     break;
@@ -77,6 +82,20 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
+  
+  case T_PGFLT:
+    //cprintf("---------------------checking page fault------------\n");
+    
+    if(myproc()->pid >2){
+      
+      int x = checkInSwapFile(myproc(),rcr2());
+      if(x != 0){
+        cprintf("found in swapfile\n");
+        //swap in
+        swapIn(myproc(),rcr2());
+      }
+    }
+    break;
 
   //PAGEBREAK: 13
   default:
diff --git a/types.h b/types.h
index e4adf64..b30d57c 100644
--- a/types.h
+++ b/types.h
@@ -2,3 +2,4 @@ typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+typedef uint pte_t;
diff --git a/vm.c b/vm.c
index 7134cff..df667ab 100644
--- a/vm.c
+++ b/vm.c
@@ -216,6 +216,202 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
   return 0;
 }
 
+
+int
+checkInSwapFile(struct proc *p, uint va)
+{
+  struct proc *curproc = myproc();
+  pte_t *pte;
+  pte = walkpgdir(curproc->pgdir, (char *)rcr2(), 0);
+  int x = *pte & PTE_PG;
+ // cprintf("x: %d\n",x);
+  return x;
+}
+
+
+void
+counterFixing(struct proc *p)
+{
+  for(int i = 0; i < MAX_PSYC_PAGES; i++){
+    uint count = p->pgListRAM[i].counter;
+    count = count >> 1;
+    if((*(p->pgListRAM[i].pte) & PTE_A) != 0 ){
+      count |= 1 << 8;
+      *(p->pgListRAM[i].pte) &= ~PTE_A;
+    }
+    p->pgListRAM[i].counter = count;
+  }
+  // cprintf("-----------------------------------------------------------------------------------------------------counter fixed\n");
+}
+
+
+void
+swapOut(struct proc *p, pde_t *pgdir, uint va, pte_t *pte, uint count)
+{
+  cprintf("------------------IN SWAP OUT---------------------\n");
+
+  char *vAddr = (char*)P2V(PTE_ADDR(*pte));
+
+  int val = writeToSwapFile(p, vAddr, PGSIZE*(p->writtenPlaceCount), PGSIZE);
+  // cprintf("-------------Val: %d\n",val);
+  if( val== -1)
+  {
+    cprintf("Can not add in swap file\n");
+    return;
+  }
+  
+  p->pgListFile[p->pageSF].pgdir = pgdir;
+  p->pgListFile[p->pageSF].va = va;
+  p->pgListFile[p->pageSF].pte = pte;
+  p->pgListFile[p->pageSF].writtenPlace = p->writtenPlaceCount;
+  
+  p->writtenPlaceCount++; //increment place
+
+  
+  // cprintf("vAddr: %p\n",*(vAddr));
+  kfree(vAddr); // memory free
+  *pte |= PTE_PG;
+  *pte &= ~PTE_P; 
+ // cprintf("After update--------index %d pte: %p\n", p->pageSF, *(p->pgListFile[p->pageSF].pte));
+  
+  // cprintf("IN swapout--------index %d pte: %p\n", p->pageSF, *(p->pgListFile[p->pageSF].pte));
+  // cprintf(" pgdir: %p, va: %d\n", *(p->pgListFile[p->pageSF].pgdir), p->pgListFile[p->pageSF].va);
+  // cprintf(" place written: %d\n", p->pgListFile[p->pageSF].writtenPlace);
+
+  cprintf("Added in swapfile\n");
+
+  p->pageSF++; //increasing index
+
+}
+
+//FIFO function
+void
+FIFO(struct proc *p)
+{
+  cprintf("-------------------------------------IN FIFO_______________\n");
+  struct pageList pg;//1st one need to be inserted in file list
+
+  pg = p->pgListRAM[0];
+
+
+  swapOut(p,pg.pgdir,pg.va,pg.pte,pg.counter);
+  for(int i = 0; i < (MAX_PSYC_PAGES-1); i++){
+    p->pgListRAM[i] = p->pgListRAM[i+1]; //making last position of ram list available
+  }
+
+  p->pagePM--;  // decreasing index
+   
+  
+}
+
+//AGING function
+void
+AGING(struct proc *p)
+{
+  cprintf("-------------------------------------IN AGING_______________\n");
+  struct pageList pg;
+
+  uint count = p->pgListRAM[0].counter;
+  int position = 0;
+  for(int i = 0; i < MAX_PSYC_PAGES; i++){
+    if(count > p->pgListRAM[i].counter){
+      count = p->pgListRAM[i].counter; 
+      position = i;
+    }  
+  }
+
+  // cprintf("Position: %d\n",position);
+
+  pg = p->pgListRAM[position];
+  swapOut(p,pg.pgdir,pg.va,pg.pte,pg.counter);
+
+  for(int i = position; i < (MAX_PSYC_PAGES-1); i++){
+    p->pgListRAM[i] = p->pgListRAM[i+1]; //making last position of ram list available
+  }
+
+  p->pagePM--;
+
+
+}
+
+
+
+void
+swapIn(struct proc *p, uint va)
+{
+  char *mem;
+  uint addr;
+
+  cprintf("--------------------In swap in------------------\n");
+
+  if(p->pagePM == 15){
+    // cprintf("----------IF--in swap in------------------\n");
+    FIFO(p);
+    // AGING(p);
+  }
+
+  // cprintf("--------------------in swap in       // After------------------\n");
+
+  // cprintf("-------------Virtual rcr2: %d\n",va);
+
+  addr = PGROUNDDOWN(va); // rounding down va when page fault occurs
+
+  mem = kalloc();
+  memset(mem, 0, PGSIZE);
+
+  lcr3(V2P(p->pgdir));
+
+  int mapval = mappages(p->pgdir, (char*)addr, PGSIZE, V2P(mem), PTE_W|PTE_U);
+  if(mapval == -1){
+    cprintf("not mapped   \n");
+    return;
+  }
+
+  //updating flags PTE_PG
+  pte_t *pte;
+  pte = walkpgdir(p->pgdir,(char *)addr,0);
+  *pte &= ~PTE_PG;
+
+  //adding in ram array
+  int position = 0;
+
+  // cprintf("-------------Virtual rounded: %d\n",addr);
+
+  for (int i=0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++){
+    // cprintf("-------------Page file va: %d write: %d pgdir: %p\n",p->pgListFile[i].va, p->pgListFile[i].writtenPlace, *(p->pgListFile[i].pgdir));
+    if(p->pgListFile[i].va == addr && p->pgListFile[i].pgdir == p->pgdir ){
+    //  cprintf("eikhane!!!!!!!!!!!!!!!!!!1\n");
+      char *vAddr = (char*)P2V(PTE_ADDR(*pte));
+      int val = readFromSwapFile(p,vAddr,PGSIZE*(p->pgListFile[i].writtenPlace),PGSIZE);
+      // cprintf("-------------Val: %d\n",val);
+      if( val == -1)
+      {
+        cprintf("Can not read from swap file\n");
+        return;
+      }
+      //cprintf("eikhane!!!!!!!!!!!!!!!!!!222222222222222222222222222222\n");
+      position = i;
+      p->pgListRAM[p->pagePM] = p->pgListFile[i];
+
+      // cprintf("index: %d  from struct pte: %p\n",p->pagePM, *(p->pgListRAM[p->pagePM].pte));
+      // cprintf("from struct pgdir: %p, va: %d\n", *(p->pgListRAM[p->pagePM].pgdir), p->pgListRAM[p->pagePM].va);
+
+      p->pagePM++;
+      break;
+    }
+  }
+
+  for (int i=position; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES - 1); i++){
+    p->pgListFile[i] = p->pgListFile[i+1];
+  }
+  p->pageSF--;
+
+  cprintf("Added in RAM\n");
+
+  // cprintf("--------------------END --------- swap in  ------------------\n");
+
+}
+
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 int
@@ -223,6 +419,9 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   char *mem;
   uint a;
+  struct proc *curproc = myproc();
+
+  //cprintf("Start------ allocuvm pid: %d, cur->pgdir %p, para->pgdir %p\n", curproc->pid, *(curproc->pgdir), *(pgdir));
 
   if(newsz >= KERNBASE)
     return 0;
@@ -231,6 +430,18 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
+    if(curproc->pid >2){  
+      if((curproc->pagePM + curproc->pageSF) == MAX_TOTAL_PAGES ){
+        panic("CAN NOT ALLOCATE NEW PAGES. TOTAL PAGE = 30\n");
+      }
+      if(curproc->pagePM == MAX_PSYC_PAGES){
+        //cprintf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+        FIFO(curproc);
+        // AGING(curproc);
+
+      }
+    }
+    
     mem = kalloc();
     if(mem == 0){
       cprintf("allocuvm out of memory\n");
@@ -238,16 +449,64 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+    int mapped = mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U);
+    
+    if( mapped < 0){
       cprintf("allocuvm out of memory (2)\n");
       deallocuvm(pgdir, newsz, oldsz);
       kfree(mem);
       return 0;
     }
+    
+    if(curproc->start == 1){
+      pte_t *pte;
+      pte = walkpgdir(pgdir,(char *)a,0);
+      curproc->pgListRAM[curproc->pagePM].pgdir = pgdir;
+      curproc->pgListRAM[curproc->pagePM].pte = pte;
+      curproc->pgListRAM[curproc->pagePM].va = a;
+      curproc->pgListRAM[curproc->pagePM].counter = 0;
+      cprintf("index: %d  from struct pte: %p\n",curproc->pagePM, *(curproc->pgListRAM[curproc->pagePM].pte));
+      cprintf("from struct pgdir: %p, va: %d\n", *(curproc->pgListRAM[curproc->pagePM].pgdir), curproc->pgListRAM[curproc->pagePM].va);
+
+      curproc->pagePM++;  //increasing index
+
+      cprintf("page adding pid: %d, pgPM: %d\n", curproc->pid, curproc->pagePM);
+      cprintf("page adding pid: %d, pgSF: %d\n", curproc->pid, curproc->pageSF);
+      
+    }
+    
   }
+  // cprintf("END------- allocuvm pid: %d, cur->pgdir %p, para->pgdir %p\n", curproc->pid, *(curproc->pgdir), *(pgdir));
   return newsz;
 }
 
+void
+pageRemove(struct proc *p,uint va, pde_t *pgdir)
+{
+  int position = -1;
+ // cprintf("PARA----- a: %d p\n", va);
+
+  for (int i = 0; i < MAX_PSYC_PAGES; i++){
+    // cprintf("In remove---- va: %d pte: %d pgdir: %d\n", p->pgListRAM[i].va, (p->pgListRAM[i].pte), (p->pgListRAM[i].pgdir));
+    if(p->pgListRAM[i].va == va && p->pgListRAM[i].pgdir==pgdir){
+     // cprintf("In remove----COND---- va: %d pte: %d pgdir: %d\n", p->pgListRAM[i].va, (p->pgListRAM[i].pte), (p->pgListRAM[i].pgdir));
+      position = i;
+      break;
+    }
+  }
+  // cprintf("Position: %d\n",position);
+
+  if(position >=0){
+    for (int i = position; i < (MAX_PSYC_PAGES - 1); i++){
+      p->pgListRAM[i] = p->pgListRAM[i+1];
+    }
+    p->pagePM--;
+    // cprintf("removed\n");
+  }
+  // cprintf("NOT removed\n");
+
+}
+
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
@@ -257,6 +516,9 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   pte_t *pte;
   uint a, pa;
+  struct proc* curproc = myproc();
+
+  // cprintf("--------In DEALLOCUVM----------\n");
 
   if(newsz >= oldsz)
     return oldsz;
@@ -270,8 +532,13 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       pa = PTE_ADDR(*pte);
       if(pa == 0)
         panic("kfree");
-      char *v = P2V(pa);
-      kfree(v);
+      char *v = P2V(pa); 
+      kfree(v);     
+      if(curproc->pid > 2){
+        // cprintf(" a: %d pte: %p pgdir: %p\n", a, *(pte), *(pgdir));
+        pageRemove(curproc,a, pgdir);  
+        
+      }     
       *pte = 0;
     }
   }
@@ -320,13 +587,25 @@ copyuvm(pde_t *pgdir, uint sz)
   uint pa, i, flags;
   char *mem;
 
+  // struct proc* curproc = myproc();
+  // cprintf("id in copyuvm: %d\n",curproc->pid);
+
   if((d = setupkvm()) == 0)
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
+
+    if (*pte & PTE_PG){
+      pte_t *pteChild;
+      pteChild = walkpgdir(d,(void *) i, 1);
+      *pteChild = *pte;
+      continue;
+    }
+
     if(!(*pte & PTE_P))
       panic("copyuvm: page not present");
+
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
